name: Build amd64 and arm64
on:
  workflow_dispatch:
    inputs:
      RELEASE:
        description: 'AlmaLinux release'
        required: true
        default: '9'
        type: choice
        options:
          - '10-kitten'
          - '10'
          - '9'
          - 'ALL'

  schedule:
    # run every day at 03:00 UTC
    - cron:  '00 03 * * *'

# REQUIRED: Set up permissions for OIDC token and KMS access
permissions:
  id-token: write
  contents: read
  packages: write

env:
  LATEST_MAJOR: 9
  IMAGE_NAME: almalinux-bootc
  VERSIONS_LIST: '"9", "10-kitten", "10"'
  # AWS KMS Configuration
  AWS_REGION: us-east-1
  KMS_KEY_ID: alias/SIG_Atomic_Container_Signing_GH_CI

jobs:
  set-versions-matrix:
    name: Set versions matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      date_stamp: ${{ steps.date-stamp.outputs.date_stamp }}
      aws_role_arn: ${{ steps.set-aws-role.outputs.aws_role_arn }}
      image_registry: ${{ steps.set-aws-role.outputs.image_registry }}
      registry_user: ${{ steps.set-aws-role.outputs.registry_user }}
      registry_password: ${{ steps.set-aws-role.outputs.registry_password }}
    steps:
      - name: Set matrix
        id: set-matrix
        run: |
          # Format json for versions matrix
          case ${{ github.event_name }} in
            workflow_dispatch)
              if [[ "${{ inputs.RELEASE }}" == "ALL" ]]; then
                echo "matrix=$(jq -c <<< '[${{ env.VERSIONS_LIST }}]')" >> $GITHUB_OUTPUT
              else
                echo "matrix=$(jq -c <<< '["${{ inputs.RELEASE }}"]')" >> $GITHUB_OUTPUT
              fi
              ;;
            schedule)
              echo "matrix=$(jq -c <<< '[${{ env.VERSIONS_LIST }}]')" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Date stamp
        id: date-stamp
        run: |
          # date stamp
          date_stamp=$(date -u '+%Y%m%d')
          [ "x${date_stamp}" != "x" ] && echo "date_stamp=${date_stamp}" >> "$GITHUB_OUTPUT"

      - name: Set AWS Role and Registry based on repository
        id: set-aws-role
        run: |
          # Use same role for both production and testing for now
          echo "aws_role_arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/SIG_Atomic_GHA_Container_Signing" >> $GITHUB_OUTPUT

          # Set registry based on repository owner
          if [[ "${{ github.repository_owner }}" == "almalinux" ]]; then
            # Production: use configured registry (Quay.io)
            echo "image_registry=${{ secrets.IMAGE_REGISTRY }}" >> $GITHUB_OUTPUT
            echo "registry_user=${{ secrets.REGISTRY_USER }}" >> $GITHUB_OUTPUT
            echo "registry_password=${{ secrets.REGISTRY_PASSWORD }}" >> $GITHUB_OUTPUT
          else
            # Testing: use ttl.sh (no auth required)
            echo "image_registry=ttl.sh" >> $GITHUB_OUTPUT
            echo "registry_user=" >> $GITHUB_OUTPUT
            echo "registry_password=" >> $GITHUB_OUTPUT
          fi

  build-amd64:
    name: amd64 image
    runs-on: ubuntu-24.04
    needs: [set-versions-matrix]
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{ fromJSON(needs.set-versions-matrix.outputs.matrix) }}

    env:
      PLATFORM: linux/amd64
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ./.github/actions/shared-steps
      name: Build and Push
      with:
        VERSION_MAJOR: ${{ matrix.VERSION_MAJOR }}
        DATE_STAMP: ${{ env.DATE_STAMP }}
        IMAGE_REGISTRY: ${{ needs.set-versions-matrix.outputs.image_registry }}
        REGISTRY_USER: ${{ needs.set-versions-matrix.outputs.registry_user }}
        REGISTRY_PASSWORD: ${{ needs.set-versions-matrix.outputs.registry_password }}
        # NEW: KMS signing configuration
        AWS_ROLE_ARN: ${{ needs.set-versions-matrix.outputs.aws_role_arn }}
        AWS_REGION: ${{ env.AWS_REGION }}
        KMS_KEY_ID: ${{ env.KMS_KEY_ID }}

  build-amd64-v2:
    if: ${{ always() && (contains(fromJSON(needs.set-versions-matrix.outputs.matrix), '10') || contains(fromJSON(needs.set-versions-matrix.outputs.matrix), '10-kitten')) }}
    name: amd64-v2 image
    runs-on: ubuntu-24.04
    needs: [set-versions-matrix]
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{ fromJSON(needs.set-versions-matrix.outputs.matrix) }}
        exclude:
          - VERSION_MAJOR: 9

    env:
      PLATFORM: linux/amd64/v2
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ./.github/actions/shared-steps
      name: Build and Push
      with:
        VERSION_MAJOR: ${{ matrix.VERSION_MAJOR }}
        DATE_STAMP: ${{ env.DATE_STAMP }}
        IMAGE_REGISTRY: ${{ needs.set-versions-matrix.outputs.image_registry }}
        REGISTRY_USER: ${{ needs.set-versions-matrix.outputs.registry_user }}
        REGISTRY_PASSWORD: ${{ needs.set-versions-matrix.outputs.registry_password }}
        # NEW: KMS signing configuration
        AWS_ROLE_ARN: ${{ needs.set-versions-matrix.outputs.aws_role_arn }}
        AWS_REGION: ${{ env.AWS_REGION }}
        KMS_KEY_ID: ${{ env.KMS_KEY_ID }}

  build-arm64:
    name: arm64 image
    runs-on: ubuntu-24.04-arm
    needs: [set-versions-matrix]
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{ fromJSON(needs.set-versions-matrix.outputs.matrix) }}
    env:
      PLATFORM: linux/arm64
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - uses: ./.github/actions/shared-steps
      name: Build and Push (${{ env.VERSION_MAJOR }})
      with:
        VERSION_MAJOR: ${{ matrix.VERSION_MAJOR }}
        DATE_STAMP: ${{ env.DATE_STAMP }}
        IMAGE_REGISTRY: ${{ needs.set-versions-matrix.outputs.image_registry }}
        REGISTRY_USER: ${{ needs.set-versions-matrix.outputs.registry_user }}
        REGISTRY_PASSWORD: ${{ needs.set-versions-matrix.outputs.registry_password }}
        # NEW: KMS signing configuration
        AWS_ROLE_ARN: ${{ needs.set-versions-matrix.outputs.aws_role_arn }}
        AWS_REGION: ${{ env.AWS_REGION }}
        KMS_KEY_ID: ${{ env.KMS_KEY_ID }}

  # NEW: Optional job to verify all signatures after building
  verify-signatures:
    name: Verify signatures
    runs-on: ubuntu-24.04
    needs: [set-versions-matrix, build-amd64, build-arm64]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{ fromJSON(needs.set-versions-matrix.outputs.matrix) }}

    env:
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.set-versions-matrix.outputs.aws_role_arn }}
          role-session-name: almalinux-signature-verification-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 300  # 5 minutes for verification

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Verify signatures
        env:
          KMS_KEY: awskms:///${{ env.KMS_KEY_ID }}
        run: |
          # Handle different registry destinations for verification
          if [[ "${{ needs.set-versions-matrix.outputs.image_registry }}" == "ttl.sh" ]]; then
            # TTL.sh format: ttl.sh/username-repo-imagename
            IMAGE_DEST="ttl.sh/${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ env.IMAGE_NAME }}"

            # For ttl.sh, use simplified tag format without version parsing
            echo "Verifying signatures for TTL.sh registry"

            # AMD64
            amd64_tag="${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64"
            echo "Verifying signature for ${IMAGE_DEST}:${amd64_tag}"
            cosign verify --key $KMS_KEY ${IMAGE_DEST}:${amd64_tag} || echo "Failed to verify amd64 signature (expected for testing)"

            # ARM64
            arm64_tag="${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-arm64"
            echo "Verifying signature for ${IMAGE_DEST}:${arm64_tag}"
            cosign verify --key $KMS_KEY ${IMAGE_DEST}:${arm64_tag} || echo "Failed to verify arm64 signature (expected for testing)"

            # AMD64-v2 (if exists)
            if [[ "${{ matrix.VERSION_MAJOR }}" == "10" || "${{ matrix.VERSION_MAJOR }}" == "10-kitten" ]]; then
              amd64v2_tag="${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64-v2"
              echo "Verifying signature for ${IMAGE_DEST}:${amd64v2_tag}"
              cosign verify --key $KMS_KEY ${IMAGE_DEST}:${amd64v2_tag} || echo "Failed to verify amd64-v2 signature (expected for testing)"
            fi

            exit 0
          fi

          # Production registry verification with version parsing
          # Get version info for image naming
          for MACHINE in x86_64 aarch64; do
            VERSION_MINOR=
            release=${{ matrix.VERSION_MAJOR }}
            if [[ "${{ matrix.VERSION_MAJOR }}" != *'kitten'* ]]; then
              almalinux_release=https://repo.almalinux.org/almalinux/almalinux-release-latest-${{ matrix.VERSION_MAJOR }}.${MACHINE}.rpm
              release=$(rpm -q --qf="%{VERSION}\n" ${almalinux_release} 2>/dev/null)
              VERSION_MINOR=.$(cut -d '.' -f 2 <<< "$release")
            fi
            eval "VERSION_MINOR_${MACHINE//-/_}=${VERSION_MINOR}"
          done

          # Verify signatures for each architecture
          IMAGE_DEST=${{ needs.set-versions-matrix.outputs.image_registry }}/${{ env.IMAGE_NAME }}

          # AMD64
          amd64_tag="${{ matrix.VERSION_MAJOR }}${VERSION_MINOR_x86_64}-${{ env.DATE_STAMP }}-amd64"
          echo "Verifying signature for ${IMAGE_DEST}:${amd64_tag}"
          cosign verify --key $KMS_KEY ${IMAGE_DEST}:${amd64_tag} || echo "Failed to verify amd64 signature"

          # ARM64
          arm64_tag="${{ matrix.VERSION_MAJOR }}${VERSION_MINOR_aarch64}-${{ env.DATE_STAMP }}-arm64"
          echo "Verifying signature for ${IMAGE_DEST}:${arm64_tag}"
          cosign verify --key $KMS_KEY ${IMAGE_DEST}:${arm64_tag} || echo "Failed to verify arm64 signature"

          # AMD64-v2 (if exists)
          if [[ "${{ matrix.VERSION_MAJOR }}" == "10" || "${{ matrix.VERSION_MAJOR }}" == "10-kitten" ]]; then
            amd64v2_tag="${{ matrix.VERSION_MAJOR }}${VERSION_MINOR_x86_64}-${{ env.DATE_STAMP }}-amd64-v2"
            echo "Verifying signature for ${IMAGE_DEST}:${amd64v2_tag}"
            cosign verify --key $KMS_KEY ${IMAGE_DEST}:${amd64v2_tag} || echo "Failed to verify amd64-v2 signature"
          fi

  push-manifest:
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    name: Push manifest
    needs: [set-versions-matrix, build-amd64, build-arm64, verify-signatures]
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        VERSION_MAJOR: ${{ fromJSON(needs.set-versions-matrix.outputs.matrix) }}
    env:
      DATE_STAMP: ${{ needs.set-versions-matrix.outputs.date_stamp }}

    steps:
      - name: Set environment
        run: |
          # Minor version for both amd64 and arm64
          for MACHINE in x86_64 aarch64; do
            VERSION_MINOR=
            release=${{ matrix.VERSION_MAJOR }}
            if [[ "${{ matrix.VERSION_MAJOR }}" != *'kitten'* ]]; then
              almalinux_release=https://repo.almalinux.org/almalinux/almalinux-release-latest-${{ matrix.VERSION_MAJOR }}.${MACHINE}.rpm
              release=$(rpm -q --qf="%{VERSION}\n" ${almalinux_release} 2>/dev/null)
              VERSION_MINOR=.$(cut -d '.' -f 2 <<< "$release")
            fi
            echo "VERSION_MINOR_${MACHINE}=${VERSION_MINOR}" >> "$GITHUB_ENV"
            echo "[Debug] MACHINE=${MACHINE} release=$release VERSION_MINOR=${VERSION_MINOR}"
            unset VERSION_MINOR release
          done

      - name: Login to registry (docker)
        uses: docker/login-action@v3
        with:
          registry: ${{ needs.set-versions-matrix.outputs.image_registry }}
          username: ${{ needs.set-versions-matrix.outputs.registry_user }}
          password: ${{ needs.set-versions-matrix.outputs.registry_password }}
        # Skip login for ttl.sh since it doesn't require authentication
        if: ${{ needs.set-versions-matrix.outputs.registry_user != '' }}

      - name: Create and push manifest (docker)
        run:  |
          # Manifest for both amd64 and arm64
          IMAGE_DEST=${{ needs.set-versions-matrix.outputs.image_registry }}/${{ env.IMAGE_NAME }}

          # For ttl.sh, use a simpler naming scheme and shorter TTL
          if [[ "${{ needs.set-versions-matrix.outputs.image_registry }}" == "ttl.sh" ]]; then
            # TTL.sh format: ttl.sh/USERNAME-REPO-IMAGENAME:TAG (24h default TTL)
            IMAGE_DEST="ttl.sh/${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ env.IMAGE_NAME }}"

            # For testing, create a simple manifest with available images
            echo "Creating test manifest for TTL.sh registry"

            # Check what images exist and create manifest accordingly
            AVAILABLE_IMAGES=""

            # Check for amd64
            if docker manifest inspect ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64 >/dev/null 2>&1; then
              AVAILABLE_IMAGES="${AVAILABLE_IMAGES} ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64"
            fi

            # Check for arm64
            if docker manifest inspect ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-arm64 >/dev/null 2>&1; then
              AVAILABLE_IMAGES="${AVAILABLE_IMAGES} ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-arm64"
            fi

            # Check for amd64-v2
            if docker manifest inspect ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64-v2 >/dev/null 2>&1; then
              AVAILABLE_IMAGES="${AVAILABLE_IMAGES} ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}-amd64-v2"
            fi

            if [[ -n "${AVAILABLE_IMAGES}" ]]; then
              # Create test manifest (shorter TTL for testing)
              docker manifest create ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }} ${AVAILABLE_IMAGES}
              docker manifest push ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}
              echo "Created test manifest: ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}"
            fi

            exit 0
          fi

          amd64_exists=0
          arm64_exists=0
          docker manifest inspect ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}${{ env.VERSION_MINOR_x86_64 }}-${{ env.DATE_STAMP }}-amd64 >/dev/null 2>&1 \
            || amd64_exists=$?
          docker manifest inspect ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}${{ env.VERSION_MINOR_aarch64 }}-${{ env.DATE_STAMP }}-arm64 >/dev/null 2>&1 \
            || arm64_exists=$?
          [ $amd64_exists -ne 0 -o $arm64_exists -ne 0 ] && exit 0

          # Don't push manifest if amd64 and arm64 minor versions differ
          VERSION_MINOR=${{ env.VERSION_MINOR_x86_64 }}
          [ "${{ env.VERSION_MINOR_x86_64 }}" != "${{ env.VERSION_MINOR_aarch64 }}" ] && exit 0

          # Loop over need tags: latest, VERSION_MAJOR, VERSION_MAJOR.VERSION_MINOR, VERSION_MAJOR.VERSION_MINOR-DATE_STAMP
          tags="latest ${{ matrix.VERSION_MAJOR }} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}"
          [[ ${{ matrix.VERSION_MAJOR }} != *'kitten'* ]] && tags="${tags} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}"
          for tag in $tags; do
              [ ${{ matrix.VERSION_MAJOR }} != ${{ env.LATEST_MAJOR }} -a "${tag}" = "latest" ] && continue
              docker manifest create ${IMAGE_DEST}:${tag} \
                  ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}-amd64 \
                  ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}-arm64

              docker manifest inspect ${IMAGE_DEST}:${tag}

              docker manifest push ${IMAGE_DEST}:${tag}
          done

      # NEW: Sign the multi-arch manifests
      - name: Configure AWS credentials for manifest signing
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.set-versions-matrix.outputs.aws_role_arn }}
          role-session-name: almalinux-manifest-signing-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 600  # 10 minutes

      - name: Install Cosign for manifest signing
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.4'

      - name: Sign multi-arch manifests
        env:
          KMS_KEY: awskms:///${{ env.KMS_KEY_ID }}
        run: |
          IMAGE_DEST=${{ needs.set-versions-matrix.outputs.image_registry }}/${{ env.IMAGE_NAME }}

          # For ttl.sh, use the modified image destination and simpler signing
          if [[ "${{ needs.set-versions-matrix.outputs.image_registry }}" == "ttl.sh" ]]; then
            IMAGE_DEST="ttl.sh/${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ env.IMAGE_NAME }}"

            echo "Signing test manifest: ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }}"
            cosign sign --yes --key $KMS_KEY ${IMAGE_DEST}:${{ matrix.VERSION_MAJOR }}-${{ env.DATE_STAMP }} || echo "Failed to sign test manifest (this is expected for testing)"

            exit 0
          fi
          VERSION_MINOR=${{ env.VERSION_MINOR_x86_64 }}

          # Sign all the manifest tags that were created
          tags="latest ${{ matrix.VERSION_MAJOR }} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}-${{ env.DATE_STAMP }}"
          [[ ${{ matrix.VERSION_MAJOR }} != *'kitten'* ]] && tags="${tags} ${{ matrix.VERSION_MAJOR }}${VERSION_MINOR}"

          for tag in $tags; do
            [ ${{ matrix.VERSION_MAJOR }} != ${{ env.LATEST_MAJOR }} -a "${tag}" = "latest" ] && continue

            echo "Signing manifest: ${IMAGE_DEST}:${tag}"
            cosign sign --yes --key $KMS_KEY ${IMAGE_DEST}:${tag}

            # Add manifest attestation
            MANIFEST_ATTESTATION=$(cat <<EOF
          {
            "buildType": "github-actions-manifest",
            "builder": {
              "id": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "invocation": {
              "configSource": {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                },
                "entryPoint": "${{ github.workflow }}"
              }
            },
            "metadata": {
              "buildInvocationId": "${{ github.run_id }}",
              "buildStartedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "manifestType": "multi-arch",
              "architectures": ["amd64", "arm64"],
              "tag": "${tag}"
            }
          }
          EOF
            )

            echo "$MANIFEST_ATTESTATION" > /tmp/manifest-attestation-${tag//\//_}.json
            cosign attest --yes --key $KMS_KEY \
              --predicate /tmp/manifest-attestation-${tag//\//_}.json \
              ${IMAGE_DEST}:${tag}
          done
